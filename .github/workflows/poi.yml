name: POI CICD

env:
  poi_path: apis/poi/**
  registry: ghcr.io
  repository: unhueteb-org/openhackdevopsunai/api-poi
  docker_path: apis/poi/web
  staging_url: https://openhackunaipoi-staging.azurewebsites.net
  prod_url: https://openhackunaipoi.azurewebsites.net
  resource_group: openhackunairg
  webapp_name: openhackunaipoi
  build_name: POI

on:
  push:
    branches:
      - main
      - 'features/**'
    paths: 
      - apis/poi/**  
      - .github/workflows/poi.yml
  pull_request:
    branches: [ main ]
    types: [edited, synchronize, opened, reopened]
    paths: 
      - apis/poi/**
      - .github/workflows/poi.yml
jobs:
  build_and_test:
    runs-on: windows-latest
    if: github.ref != 'refs/heads/main'
    steps:
    # IF PR, check a Issue has been linked
    - name: Verify Linked Issue
      if: github.event_name == 'pull_request'
      uses: hattan/verify-linked-issue-action@v1.1.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.1.403'
    - name: Add Code Coverage Tools
      working-directory: apis/poi/tests/UnitTests
      run: dotnet add package coverlet.msbuild

    - name: Install dependencies
      run: dotnet restore apis/poi/web/poi.csproj
      
    - name: .NET Build Web
      run: dotnet build --configuration Release --no-restore apis/poi/web/poi.csproj

    - name: .NET Build Unit Tests
      run: dotnet build --configuration Release apis/poi/tests/UnitTests/UnitTests.csproj

    - name: .NET Test
      run: dotnet test --no-restore --verbosity normal apis/poi/tests/UnitTests  /p:CollectCoverage=true /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov
      
    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: apis/poi/tests/UnitTests/lcov/coverage.info
        base-path: apis/poi
        flag-name: Unit
  #Create GH Issue if job fails 
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
          
  #Build docker image for master branch and publish to GitHub Packages
  docker_build_and_push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Docker login
      run: docker login $registry -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
    - name: Docker build
      run: docker build -t $registry/$repository:${{github.run_number}} --build-arg build_version=${{github.run_number}} $docker_path
    - name: Docker Push
      run: docker push $registry/$repository:${{github.run_number}}
#Create GH Issue if job fails 
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
          
  deploy_staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Azure WebApp
      uses: Azure/webapps-deploy@v2
      with:
        app-name: ${{ env.webapp_name }}
        slot-name: staging
        images: ${{ env.registry }}/${{ env.repository }}:${{github.run_number}}
    - name: Start staging
      run: |
        az webapp start --name $webapp_name --resource-group $resource_group --slot staging
    
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
          
  validate_staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy_staging
    steps:
    - name: URL Health Check
      uses: Jtalk/url-health-check-action@v1.5
      with:
        url: ${{env.staging_url}}/api/healthcheck/poi
        max-attempts: 3
        retry-delay: 5s

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });     
  swap_slots:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: validate_staging
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Swap staging to production
      run: |
        az webapp deployment slot swap --name $webapp_name --resource-group $resource_group --slot staging --target-slot production
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });  
  validate_production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: swap_slots
    steps:
    #Health check
    - name: URL Health Check
      uses: Jtalk/url-health-check-action@v1.5
      with:
        url: ${{env.prod_url}}/api/healthcheck/poi
        max-attempts: 3
        retry-delay: 5s
    #Load Test using K6
    - uses: actions/checkout@v2
    - name: Run local k6 test
      uses: k6io/action@v0.1
      with:
        filename: apis/poi/tests/LoadTest/test.js
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Stop staging
      run: |
        az webapp stop --name $webapp_name --resource-group $resource_group --slot staging
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
          
  roll_back:
    if: failure()
    runs-on: ubuntu-latest
    needs: validate_production
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Swap production and staging
      run: |
        az webapp deployment slot swap --name $webapp_name --resource-group $resource_group --slot staging --target-slot production 
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });   
    
